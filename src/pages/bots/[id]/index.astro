---
import Root from "@/layouts/Layout.astro";
let { id } = Astro.params;
import approx from "approximate-number";
import { Separator } from "@/components/ui/separator";
import { db, Bots, eq, or, not, desc, Users, sql } from "astro:db";
import getAvatarURL from "@/lib/get-avatar-url";
import { type Bot } from "@/components/bot-card";
import PopupDesktop from "@/components/botpage-popup-desktop";
import TwemojiText from "@/components/twemoji-text";
import BotPage from "@/components/legacy-bot-page";
import { getBanner } from "../../api/internals/users/[id]/banner";
import { asDrizzleTable } from "@astrojs/db/runtime";
import getBannerURL from "@/lib/get-banner-url";
import BotCardList from "@/components/bot-card-list.astro";
import { DISCORD_TOKEN } from "astro:env/server";
import { Marked } from "marked";
import { markedHighlight } from "marked-highlight";
import hljs from "highlight.js";

const bot = (
  await db
    .select({
      id: Bots.id,
      slug: Bots.slug,
      avatar: Bots.avatar,
      username: Bots.username,
      discriminator: Bots.discriminator,
      short: Bots.short,
      votes: Bots.votes,
      servers: Bots.servers,
      invite: Bots.invite,
      bg: Bots.bg,
      desc: Bots.desc,
      badges: Bots.badges,
      source_repo: Bots.source_repo,
      support: Bots.support,
      website: Bots.website,
      owners: Bots.owners,
      donate: Bots.donate,
      prefix: Bots.prefix,
      lib: Bots.lib,
    })
    .from(Bots)
    .where(or(eq(Bots.slug, id), eq(Bots.id, id)))
)[0];
if (!bot)
  return new Response("", {
    status: 302,
    headers: {
      location: "/404",
    },
  });

if (!bot.bg) {
  const botbanner = await getBanner(bot.id, DISCORD_TOKEN);
  if (botbanner) {
    bot.bg = getBannerURL({ banner: botbanner, id: bot.id });
    await db.update(Bots).set({ bg: botbanner }).where(eq(Bots.id, bot.id));
  }
}
if (bot.bg && bot.bg.startsWith("https://cdn.discordapp.com/banners")) {
  //we get banners from discord. we dont save it though, so we can modify image as we want.
  bot.bg = getBannerURL({ banner: bot.bg, id: bot.id });
}
const randombots = (await db
  .select({
    id: Bots.id,
    slug: Bots.slug,
    avatar: Bots.avatar,
    username: Bots.username,
    discriminator: Bots.discriminator,
    short: Bots.short,
    votes: Bots.votes,
    servers: Bots.servers,
    invite: Bots.invite,
    bg: Bots.bg,
  })
  .from(Bots)
  .where(not(eq(Bots.id, bot.id)))
  .orderBy(sql`RANDOM()`)
  .limit(10)) as Bot[];

bot.owners = (
  await Promise.all(
    (bot.owners as string[]).map(async owner => {
      const user = (
        await db
          .select({
            username: Users.username,
            avatar: Users.avatar,
            id: Users.id,
          })
          .from(Users)
          .where(eq(Users.id, owner))
      )[0];
      return user;
    }),
  )
).filter(x => x);

const marked = new Marked(
  markedHighlight({
    emptyLangClass: "hljs",
    langPrefix: "hljs language-",
    highlight(code, lang, info) {
      const language = hljs.getLanguage(lang) ? lang : "plaintext";
      return hljs.highlight(code, { language }).value;
    },
  }),
);

bot.desc = await marked.parse(bot.desc.replace(/&gt;+/g, ">"));

Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=120, stale-while-revalidate=300",
);

Astro.response.headers.set(
  "Netlify-Vary",
  "query=key|slug|code,cookie=key|code,header=user-agent",
);
---

<Root
  title={`${bot.username}#${bot.discriminator} Discord Bot | The Best Discord Bot List`}
  smallImgLink={getAvatarURL(bot.id, bot.avatar)}
  imgLink={bot.bg && bot.bg.startsWith("https")
    ? bot.bg
    : getBannerURL({ banner: bot.bg, id: bot.id })}
  description={`${bot.username} is in ${approx(bot.servers).toUpperCase()} servers, Add It Today! ${bot.short}`}
>
  <div class="p-4">
    <div>
      {bot && <BotPage bot={bot as any} client:load client:only="react" />}
    </div>
    {
      randombots && (
        <div class="mt-12">
          <h3 class="font-heading text-4xl font-bold mb-4 md:text-left mt-12 md:mx-32 text-center">
            <img
              alt="Fire Icon"
              src="/img/mostvote.svg"
              class="w-8 h-8 inline-block text-primary -mt-2"
            />
            You Might Also Like
          </h3>
          <p class="text-gray-600 dark:text-gray-300 text-xl mb-8 md:mx-32 mx-4 md:text-left text-center font-semibold">
            Discover related Discord bots that offer comparable features or serve similar purposes for your server.
          </p>
          <div class="overflow-y-auto">
            <BotCardList list={randombots} />
          </div>
        </div>
      )
    }
  </div>
</Root>
<!-- {bot && <PopupDesktop bot={bot as any} client:media="!(min-width: 768px)" />} -->
