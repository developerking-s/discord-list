---
export const prerender = false;
import { Button, buttonVariants } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import Root from "@/layouts/Layout.astro";
import getAvatarURL from "@/lib/get-avatar-url";
let { id } = Astro.params;
import { db, Bots, Users, eq, or } from "astro:db";
import DiscordOauth2 from "discord-oauth2";
const bot = (
  await db
    .select({
      id: Bots.id,
      avatar: Bots.avatar,
      username: Bots.username,
      discriminator: Bots.discriminator,
      opted_coins: Bots.opted_coins,
    })
    .from(Bots)
    .where(or(eq(Bots.slug, id), eq(Bots.id, id)))
)[0];
if (!bot)
  return new Response("", {
    status: 302,
    headers: {
      location: "/404",
    },
  });
const key = Astro.cookies.get("key")?.value;
const oauth2 = new DiscordOauth2({
  clientId: import.meta.env.DISCORD_BOT_ID || process.env.DISCORD_BOT_ID,
  clientSecret: import.meta.env.DISCORD_SECRET || process.env.DISCORD_SECRET,
  redirectUri: (import.meta.env.DOMAIN || process.env.DOMAIN) + "/api/auth",
});
const userData = key ? await oauth2.getUser(key) : null;
const user = userData
  ? (
      await db
        .select({
          bal: Users.bal,
        })
        .from(Users)
        .where(eq(Users.id, userData.id))
    )[0]
  : null;
---

<Root title="Rovel Discord List">
  <div class="w-full block md:px-4">
    <div
      class="w-full border-popover px-4 pb-8 border-b-2 md:border-b-0 md:border-r-2 h-full"
    >
      <img
        src={getAvatarURL(bot.id, bot.avatar)}
        crossorigin="anonymous"
        class="mx-auto w-36 h-36 rounded-full bg-card border-card border-8"
        alt={`${bot.username}'s Avatar`}
      />
      <h1 class="text-3xl md:text-5xl font-heading text-center my-4 font-black">
        {bot.username}
      </h1>
    </div>
    {
      userData && (
        <div class="md:max-w-lg mx-auto flex flex-col items-center">
          {bot.opted_coins && (
            <Input
              id="coins"
              type="number"
              placeholder={`You have R$${user.bal}`}
              className="mt-4 mx-4 w-4/5 md:mx-0 md:w-1/2"
            />
          )}
          <div class="flex justify-center mt-4 w-full">
            <Button
              className="mx-8 w-full md:mx-0 md:w-1/2"
              id="vote-button"
              data-x-id={`${id}`}
            >
              Vote
            </Button>
          </div>
        </div>
      )
    }
    {
      !userData && (
        <div class="flex justify-center mt-4">
          <Button className="w-1/2 md:w-36" variant="secondary">
            Login in order to vote
          </Button>
        </div>
      )
    }
  </div>
</Root>

<script>
  // alert(
  //   "The website is being updated, so the voting system is disabled for now. Sorry for the inconvenience.",
  // );
  const voteButton = document.getElementById("vote-button");
  const coins = document.getElementById("coins") as HTMLInputElement;
  voteButton.addEventListener("click", async () => {
    const res = await fetch(
      `/api/bots/${voteButton.getAttribute("data-x-id")}/vote${coins?.value ? `?coins=${coins.value}` : ""}`,
      {
        method: "POST",
      },
    );
    if (res.ok) {
      const data = await res.json();
      console.log(data);
      if (!data.success && data.try_after)
        return alert(`You can vote again in ${data.try_after}.`);
      else if (!data.success) return alert(data.err);
      else if (data.success) {
        alert("Voted successfully!");
        window.location.href = `/bots/${voteButton.getAttribute("data-x-id")}`;
      }
    } else {
      //show error
      const data = await res.json();
      alert(data.err.replace("_", " "));
    }
  });
</script>
